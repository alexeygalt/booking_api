version: "3.9"

services:
  nginx:
    build:
      context: .
      dockerfile: "nginx/Dockerfile"
    ports:
      - "80:80"
      - "443:443"
    links:
      - app



  db:
    image: postgres:15
    container_name: booking_db
    env_file:
      - .env-non-dev
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB " ]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.2.4-alpine
    restart: always

  app:
    build: .
    env_file:
      - .env-non-dev
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    command: [ "/booking/docker/app.sh" ]
#    ports:
#      - "8000:8000"

  celery:
    build: .
    depends_on:
      redis:
        condition: service_started
    env_file:
      - .env-non-dev
    command: [ "/booking/docker/celery.sh","celery" ]

  flower:
    build: .
    depends_on:
      redis:
        condition: service_started
    env_file:
      - .env-non-dev
    command: [ "/booking/docker/celery.sh","flower" ]


#  prometheus:
#    image: prom/prometheus:v2.43.0
#    volumes:
#      - ./prometheus.yml:/etc/prometheus/prometheus.yml
#      - prometheus_data:/prometheus
#    restart: unless-stopped
#    ports:
#      - "9090:9090"
#
#  grafana:
#    image: grafana/grafana:9.4.7
#    volumes:
#      - grafana_data:/var/lib/grafana
#    restart: unless-stopped
#    ports:
#      - "3000:3000"


volumes:
  postgres_data:
#  prometheus_data:
#  grafana_data:
